课程安排： 参考高质量C++编程和华为编码规范，抽取核心部分形成一个2小时的课程讲义。



课程目标：


课程内容补充：
质量：CMM定义：
1、一个系统、组件、或过程符合特定需求的程度；
2、一个系统、组件、或过程符合客户或用户的要求或期望的程度。



高质量：软件开发人员对正确性、健壮性、可靠性、效率、易用性、可读性（可理解性）、可扩展性、可复
用性、兼容性、可移植性等质量属性应进行详细的了解和认识。并且能够在实际中灵活的应用。
功能性质量属性：正确性、健壮性、可靠性
非功能性质量属性：性能、易用性、清晰性、安全性、可扩展性、兼容性和可移植性。

细说质量属性：
功能性：

正确性：软件质量属性中最重要的部分，指软件按照需求正确执行任务的能力。从软件的“需求开发”到“系统设计”到“实现”，都对软件的正确性有很高的要求。

健壮性：在软件出现异常的情况下，软件依然正常的运行的能力。健壮性是软件在需求范围之外的行为。
健壮性的两层含义：1、容错能力。2、恢复能力。
容错：指发生异常情况时系统不出错误的能力。(针对不同的软件项目需求，容错性有很大的差别。)
恢复：指软件发生错误后能够重新运行，并且恢复到没有发生错误前的状态。(例如：使用电脑时，有时会出现死机，但重启后，系统依然能够恢复到之前的状态)

可靠性：是一个与时序相关的属性，指在一定环境，在一定时间段内，程序不出现故障的概率。用“平均无故障时间”来衡量。
故障和错误的区别：
故障：在测试时的环境和条件不足以使代码或硬件中的错误暴露。不可预料，后果严重。
错误：例如语法、语义等可预见的错误，在调试的时候就可以改正。

非功能性：

性能：指软件的“时间-空间”效率，可以通过优化数据结构、算法复杂度进行提前的预估。目标：“既要马儿跑的快，又要马儿吃得少”。

易用性：指用户使用软件的容易程度。(最好是使用按键实行相对应的功能)
测试最好是从用户角度出发，进行用户测评。

清晰性：指软件成果易读、易理解，让用户在使用时明白用的是什么东西。和易用性相照应。
只有研发人员思路清晰，才能写出易读，可理解的程序，简洁

安全性：指信息安全。不存在绝对安全的软件或系统，但如果盗用软件或系统的代价大于开发软件的成本，就认为软件或系统是安全的。

可扩展性：指软件适应“变化”的能力。   (软件或系统设计阶段重点考虑的质量属性)

兼容性：指两个或两个以上的软件相互交换信息的能力。
兼容性规则：弱者设法与强者兼容，强者应避免被兼容。

可移植性：指软件不经修改或稍加修改就可以运行于不同软硬件环境的能力。


为什么要讲软件高质量？

消除软件缺陷的三种方式：
1、将高质量编程内建于开发过程中，而不是在出错后花费大量的时间找错误，最佳方式。
2、在开发完成后立马进行软件测试，从而尽快的消除软件开发过程中的一些缺陷。
3、软件交付后，出现问题，及时补救。


软件开发之前进行软件质量目标的设定，根据企业的实际情况制定相应的目标，才能完成高质量的软件。


测试：
软件设计后期进行软件测试，
软件测试的重要性：主要目的是为了发现尽可能多的缺陷。

测试分类：

调试：(改错）指寻找错误根源的过程。
调试时注意事项：
	1、寻找到错误不要急于修改，应先思考修改该错误会不会引发其他的错误。
	2、思考是不是还存在类似的错误，一并解决。
	3、修改完错误后要马上回归测试，避免其他错误产生。









编程老手与编程高手的定义：
编程老手：能够长期稳定的编写出高质量程序的程序员。
编程高手：能长期稳定的编写出高难度、高质量程序的程序员。

CMMI ：CMMI全称是Capability Maturity Model Integration，即能力成熟度模型集成（也有称为：软件能力成熟度集成模型）。
其目的是帮助软件企业对软件工程过程进行管理和改进，增强开发与改进能力，从而能按时地、不超预算地开发出高质量的软件。
其所依据的想法是：只要集中精力持续努力去建立有效的软件工程过程的基础结构，不断进行管理的实践和过程的改进，就可以克服软件开发中的困难。
CMMI为改进一个组织的各种过程提供了一个单一的集成化框架，新的集成模型框架消除了各个模型的不一致性，减少了模型间的重复，增加透明度和理解，建立了一个自动的、可扩展的框架。
因而能够从总体上改进组织的质量和效率。CMMI主要关注点就是成本效益、明确重点、过程集中和灵活性四个方面。



程序设计：
标准C语言并没有提供I/O的实现，只是定义了标准的I/O函数接口，所有的I/O工作都是通过库函数来完成的。

学习一门语言：首先应该掌握语言的特征及其使用方法，再学习具体的语言实现才是语言学习的正确道路。

“存储程序控制”原理：本质上，任何一个程序都是由待处理的数据和一系列处理指令组成的，这些指令通过内存地址来访问待处理数据。

运行时的本质：存在于二进制可执行程序中的只是指令、地址、数据，没有别的东西。

编译时的本质：标识符、类型定义、const关键字等等只是存在于源代码中，不会被带入二进制可执行程序中。





课程目标杂记：
良好的编程习惯：应当遵循“KISS”原则，保持简单，傻瓜化。用简单而直接的方式编写程序。
高质量的代码源于高质量的设计和良好的编程风格。

什么是好的设计？        
1、好的设计应当恰如其分地反映、解决一个具体的问题，没有不必要的特性。
2、好的设计应该尽量降低对象之间、模块之间的耦合性。

一个良好的编程习惯可以用于任何编程语言中，生产的代码不仅容易阅读、容易理解，而且易于调试和测试。
良好的编程习惯体现在良好的编码风格上，形成良好编码风格的指导原则：
1、书写的代码结构安排合理，版式要清晰一致。
2、标识符要取个“自说明”的名字。
3、不使用过于复杂的语句和表达式。
4、使用清晰的注释。
等等许多可取的编码规则。















































